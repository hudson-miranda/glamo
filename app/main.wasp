app OpenSaaS {
  wasp: {
    version: "^0.18.0"
  },

  title: "My Open SaaS App",

  head: [
    "<link rel='icon' href='/favicon.ico' />",
    "<meta charset='utf-8' />",
    "<meta name='description' content='Your apps main description and features.' />",
    "<meta name='author' content='Your (App) Name' />",
    "<meta name='keywords' content='saas, solution, product, app, service' />",
    
    "<meta property='og:type' content='website' />",
    "<meta property='og:title' content='Your Open SaaS App' />",
    "<meta property='og:site_name' content='Your Open SaaS App' />",
    "<meta property='og:url' content='https://your-saas-app.com' />",
    "<meta property='og:description' content='Your apps main description and features.' />",
    "<meta property='og:image' content='https://your-saas-app.com/public-banner.webp' />",
    "<meta name='twitter:image' content='https://your-saas-app.com/public-banner.webp' />",
    "<meta name='twitter:image:width' content='800' />",
    "<meta name='twitter:image:height' content='400' />",
    "<meta name='twitter:card' content='summary_large_image' />",
    // TODO: You can put your Plausible analytics scripts below (https://docs.opensaas.sh/guides/analytics/):
    // NOTE: Plausible does not use Cookies, so you can simply add the scripts here.
    // Google, on the other hand, does, so you must instead add the script dynamically
    // via the Cookie Consent component after the user clicks the "Accept" cookies button.
    "<script defer data-domain='<your-site-id>' src='https://plausible.io/js/script.js'></script>",  // for production
    "<script defer data-domain='<your-site-id>' src='https://plausible.io/js/script.local.js'></script>",  // for development
  ],

  // üîê Auth out of the box! https://wasp.sh/docs/auth/overview
  auth: {
    userEntity: User,
    methods: {
      // NOTE: If you decide to not use email auth, make sure to also delete the related routes and pages below.
      //   (RequestPasswordReset(Route|Page), PasswordReset(Route|Page), EmailVerification(Route|Page))
      email: {
        fromField: {
          name: "Open SaaS App",
          email: "me@example.com"
        },
        emailVerification: {
          clientRoute: EmailVerificationRoute,
          getEmailContentFn: import { getVerificationEmailContent } from "@src/auth/email-and-pass/emails",
        },
        passwordReset: {
          clientRoute: PasswordResetRoute,
          getEmailContentFn: import { getPasswordResetEmailContent } from "@src/auth/email-and-pass/emails",
        },
        userSignupFields: import { getEmailUserFields } from "@src/auth/userSignupFields",
      },
      // Uncomment to enable Google Auth (check https://wasp.sh/docs/auth/social-auth/google for setup instructions):
      // google: { // Guide for setting up Auth via Google
      //   userSignupFields: import { getGoogleUserFields } from "@src/auth/userSignupFields",
      //   configFn: import { getGoogleAuthConfig } from "@src/auth/userSignupFields",
      // },
      // Uncomment to enable GitHub Auth (check https://wasp.sh/docs/auth/social-auth/github for setup instructions):
      // gitHub: {
      //   userSignupFields: import { getGitHubUserFields } from "@src/auth/userSignupFields",
      //   configFn: import { getGitHubAuthConfig } from "@src/auth/userSignupFields",
      // },
      // Uncomment to enable Discord Auth (check https://wasp.sh/docs/auth/social-auth/discord for setup instructions):
      // discord: {
      //   userSignupFields: import { getDiscordUserFields } from "@src/auth/userSignupFields",
      //   configFn: import { getDiscordAuthConfig } from "@src/auth/userSignupFields"
      // }
    },
    onAuthFailedRedirectTo: "/login",
    onAuthSucceededRedirectTo: "/dashboard",
  },

  db: {
    // Run `wasp db seed` to seed the database with the seed functions below:
    seeds: [
      // Populates the database with a bunch of fake users to work with during development.
      import { seedMockUsers } from "@src/server/scripts/dbSeeds",
      // Seeds Glamo-specific data (RBAC permissions and roles)
      import { seedGlamoData } from "@src/server/scripts/glamoSeeds",
    ]
  },

  client: {
    rootComponent: import App from "@src/client/App",
  },

  emailSender: {
    // NOTE: "Dummy" provider is just for local development purposes.
    //   Make sure to check the server logs for the email confirmation url (it will not be sent to an address)!
    //   Once you are ready for production, switch to e.g. "SendGrid" or "Mailgun" providers. Check out https://docs.opensaas.sh/guides/email-sending/ .
    provider: Dummy,
    defaultFrom: {
      name: "Open SaaS App",
      // When using a real provider, e.g. SendGrid, you must use the same email address that you configured your account to send out emails with!
      email: "me@example.com"
    },
  },
}

route LandingPageRoute { path: "/", to: LandingPage }
page LandingPage {
  component: import LandingPage from "@src/landing-page/LandingPage"
}

//#region Auth Pages
route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import Login from "@src/auth/LoginPage"
}

route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import { Signup } from "@src/auth/SignupPage"
}

route RequestPasswordResetRoute { path: "/request-password-reset", to: RequestPasswordResetPage }
page RequestPasswordResetPage {
  component: import { RequestPasswordResetPage } from "@src/auth/email-and-pass/RequestPasswordResetPage",
}

route PasswordResetRoute { path: "/password-reset", to: PasswordResetPage }
page PasswordResetPage {
  component: import { PasswordResetPage } from "@src/auth/email-and-pass/PasswordResetPage",
}

route EmailVerificationRoute { path: "/email-verification", to: EmailVerificationPage }
page EmailVerificationPage {
  component: import { EmailVerificationPage } from "@src/auth/email-and-pass/EmailVerificationPage",
}
//#endregion

//#region User
route AccountRoute { path: "/account", to: AccountPage }
page AccountPage {
  authRequired: true,
  component: import Account from "@src/user/AccountPage"
}

query getPaginatedUsers {
  fn: import { getPaginatedUsers } from "@src/user/operations",
  entities: [User]
}

action updateIsUserAdminById {
  fn: import { updateIsUserAdminById } from "@src/user/operations",
  entities: [User]
}
//#endregion

//#region Demo AI App
route DemoAppRoute { path: "/demo-app", to: DemoAppPage }
page DemoAppPage {
  authRequired: true,
  component: import DemoAppPage from "@src/demo-ai-app/DemoAppPage"
}

action generateGptResponse {
  fn: import { generateGptResponse } from "@src/demo-ai-app/operations",
  entities: [User, Task, GptResponse]
}

action createTask {
  fn: import { createTask } from "@src/demo-ai-app/operations",
  entities: [Task]
}

action deleteTask {
  fn: import { deleteTask } from "@src/demo-ai-app/operations",
  entities: [Task]
}

action updateTask {
  fn: import { updateTask } from "@src/demo-ai-app/operations",
  entities: [Task]
}

query getGptResponses {
  fn: import { getGptResponses } from "@src/demo-ai-app/operations",
  entities: [User, GptResponse]
}

query getAllTasksByUser {
  fn: import { getAllTasksByUser } from "@src/demo-ai-app/operations",
  entities: [Task]
}
//#endregion

//#region Payment
route PricingPageRoute { path: "/pricing", to: PricingPage }
page PricingPage {
  component: import PricingPage from "@src/payment/PricingPage"
}

route CheckoutRoute { path: "/checkout", to: CheckoutPage }
page CheckoutPage {
  authRequired: true,
  component: import Checkout from "@src/payment/CheckoutPage"
}

query getCustomerPortalUrl {
  fn: import { getCustomerPortalUrl } from  "@src/payment/operations",
  entities: [User]
}

action generateCheckoutSession {
  fn: import { generateCheckoutSession } from "@src/payment/operations",
  entities: [User]
}

api paymentsWebhook {
  fn: import { paymentsWebhook } from "@src/payment/webhook",
  entities: [User],
  middlewareConfigFn: import { paymentsMiddlewareConfigFn } from "@src/payment/webhook",
  httpRoute: (POST, "/payments-webhook")
}
//#endregion

//#region File Upload
route FileUploadRoute { path: "/file-upload", to: FileUploadPage }
page FileUploadPage {
  authRequired: true,
  component: import FileUpload from "@src/file-upload/FileUploadPage"
}

action createFile {
  fn: import { createFile } from "@src/file-upload/operations",
  entities: [User, File]
}

query getAllFilesByUser {
  fn: import { getAllFilesByUser } from "@src/file-upload/operations",
  entities: [User, File]
}

query getDownloadFileSignedURL {
  fn: import { getDownloadFileSignedURL } from "@src/file-upload/operations",
  entities: [User, File]
}
//#endregion

//#region Analytics
query getDailyStats {
  fn: import { getDailyStats } from "@src/analytics/operations",
  entities: [User, DailyStats]
}

job dailyStatsJob {
  executor: PgBoss,
  perform: {
    fn: import { calculateDailyStats } from "@src/analytics/stats"
  },
  schedule: {
    cron: "0 * * * *" // every hour. useful in production
    // cron: "* * * * *" // every minute. useful for debugging
  },
  entities: [User, DailyStats, Logs, PageViewSource]
}
//#endregion

//#region Admin Dashboard
route AdminRoute { path: "/admin", to: AnalyticsDashboardPage }
page AnalyticsDashboardPage {
  authRequired: true,
  component: import AnalyticsDashboardPage from "@src/admin/dashboards/analytics/AnalyticsDashboardPage"
}

route AdminUsersRoute { path: "/admin/users", to: AdminUsersPage }
page AdminUsersPage {
  authRequired: true,
  component: import AdminUsers from "@src/admin/dashboards/users/UsersDashboardPage"
}

route AdminSettingsRoute { path: "/admin/settings", to: AdminSettingsPage }
page AdminSettingsPage {
  authRequired: true,
  component: import AdminSettings from "@src/admin/elements/settings/SettingsPage"
}

route AdminCalendarRoute { path: "/admin/calendar", to: AdminCalendarPage }
page AdminCalendarPage {
  authRequired: true,
  component: import AdminCalendar from "@src/admin/elements/calendar/CalendarPage"
}


route AdminUIButtonsRoute { path: "/admin/ui/buttons", to: AdminUIButtonsPage }
page AdminUIButtonsPage {
  authRequired: true,
  component: import AdminUI from "@src/admin/elements/ui-elements/ButtonsPage"
}

route NotFoundRoute { path: "*", to: NotFoundPage }
page NotFoundPage {
  component: import { NotFoundPage } from "@src/client/components/NotFoundPage"
}
//#endregion

//#region Contact Form Messages
// TODO: 
// add functionality to allow users to send messages to admin
// and make them accessible via the admin dashboard
route AdminMessagesRoute { path: "/admin/messages", to: AdminMessagesPage }
page AdminMessagesPage {
  authRequired: true,
  component: import AdminMessages from "@src/admin/dashboards/messages/MessagesPage"
}
//#endregion

//#region Glamo - Clients Module
query listClients {
  fn: import { listClients } from "@src/clients/operations",
  entities: [User, Client, UserSalon, Role, Permission, RolePermission, UserRole]
}

query getClient {
  fn: import { getClient } from "@src/clients/operations",
  entities: [User, Client, Appointment, Sale, ClientCredit, UserSalon, Role, Permission, RolePermission, UserRole]
}

action createClient {
  fn: import { createClient } from "@src/clients/operations",
  entities: [User, Client, Log, UserSalon, Role, Permission, RolePermission, UserRole]
}

action updateClient {
  fn: import { updateClient } from "@src/clients/operations",
  entities: [User, Client, Log, UserSalon, Role, Permission, RolePermission, UserRole]
}

action deleteClient {
  fn: import { deleteClient } from "@src/clients/operations",
  entities: [User, Client, Appointment, Log, UserSalon, Role, Permission, RolePermission, UserRole]
}
//#endregion

//#region Glamo - Notifications Module
query listNotifications {
  fn: import { listNotifications } from "@src/notifications/operations",
  entities: [User, Notification, UserSalon]
}

action createNotification {
  fn: import { createNotification } from "@src/notifications/operations",
  entities: [User, Notification, Log, UserSalon]
}

action markNotificationRead {
  fn: import { markNotificationRead } from "@src/notifications/operations",
  entities: [User, Notification, Log]
}

action markAllNotificationsRead {
  fn: import { markAllNotificationsRead } from "@src/notifications/operations",
  entities: [User, Notification, Log]
}
//#endregion

//#region Glamo - Services Module
query listServices {
  fn: import { listServices } from "@src/services/operations",
  entities: [User, Service, ServiceRoom, ServiceVariant, CommissionConfig, UserSalon, Role, Permission, RolePermission, UserRole]
}

query getService {
  fn: import { getService } from "@src/services/operations",
  entities: [User, Service, ServiceRoom, ServiceVariant, CommissionConfig, ServiceCategory, UserSalon, Role, Permission, RolePermission, UserRole]
}

action createService {
  fn: import { createService } from "@src/services/operations",
  entities: [User, Service, ServiceRoom, Log, UserSalon, Role, Permission, RolePermission, UserRole]
}

action updateService {
  fn: import { updateService } from "@src/services/operations",
  entities: [User, Service, ServiceRoom, Log, UserSalon, Role, Permission, RolePermission, UserRole]
}

action deleteService {
  fn: import { deleteService } from "@src/services/operations",
  entities: [User, Service, AppointmentService, Appointment, Log, UserSalon, Role, Permission, RolePermission, UserRole]
}

action createServiceVariant {
  fn: import { createServiceVariant } from "@src/services/operations",
  entities: [User, Service, ServiceVariant, Log, UserSalon, Role, Permission, RolePermission, UserRole]
}

action updateServiceVariant {
  fn: import { updateServiceVariant } from "@src/services/operations",
  entities: [User, Service, ServiceVariant, Log, UserSalon, Role, Permission, RolePermission, UserRole]
}

action deleteServiceVariant {
  fn: import { deleteServiceVariant } from "@src/services/operations",
  entities: [User, Service, ServiceVariant, AppointmentService, Appointment, Log, UserSalon, Role, Permission, RolePermission, UserRole]
}

action manageCommissionConfig {
  fn: import { manageCommissionConfig } from "@src/services/operations",
  entities: [User, Service, CommissionConfig, Log, UserSalon, Role, Permission, RolePermission, UserRole]
}
//#endregion

//#region Glamo - Appointments Module
query listAppointments {
  fn: import { listAppointments } from "@src/appointments/operations",
  entities: [User, Appointment, Client, Service, ServiceVariant, AppointmentService, AppointmentAssistant, UserSalon, Role, Permission, RolePermission, UserRole]
}

query getAppointment {
  fn: import { getAppointment } from "@src/appointments/operations",
  entities: [User, Appointment, Client, Service, ServiceVariant, AppointmentService, AppointmentAssistant, Voucher, AppointmentRepetition, AppointmentStatusLog, UserSalon, Role, Permission, RolePermission, UserRole]
}

query getAvailableSlots {
  fn: import { getAvailableSlots } from "@src/appointments/operations",
  entities: [User, Appointment, UserSalon, Role, Permission, RolePermission, UserRole]
}

action createAppointment {
  fn: import { createAppointment } from "@src/appointments/operations",
  entities: [User, Appointment, Client, Service, ServiceVariant, AppointmentService, AppointmentAssistant, AppointmentStatusLog, Log, UserSalon, Role, Permission, RolePermission, UserRole]
}

action updateAppointment {
  fn: import { updateAppointment } from "@src/appointments/operations",
  entities: [User, Appointment, Client, Service, ServiceVariant, AppointmentService, AppointmentAssistant, Log, UserSalon, Role, Permission, RolePermission, UserRole]
}

action deleteAppointment {
  fn: import { deleteAppointment } from "@src/appointments/operations",
  entities: [User, Appointment, AppointmentStatusLog, Log, UserSalon, Role, Permission, RolePermission, UserRole]
}

action updateAppointmentStatus {
  fn: import { updateAppointmentStatus } from "@src/appointments/operations",
  entities: [User, Appointment, AppointmentStatusLog, Log, UserSalon, Role, Permission, RolePermission, UserRole]
}
//#endregion

//#region Glamo - Sales Module
query listSales {
  fn: import { listSales } from "@src/sales/operations",
  entities: [User, Sale, Client, Voucher, SaleService, SaleProduct, SalePackage, Service, ServiceVariant, Product, Package, Payment, UserSalon, Role, Permission, RolePermission, UserRole, Log]
}

query getSale {
  fn: import { getSale } from "@src/sales/operations",
  entities: [User, Sale, Salon, Client, Voucher, SaleService, SaleProduct, SalePackage, Service, ServiceVariant, Product, Package, Payment, PaymentMethod, CreditPayment, ClientCredit, UserSalon, Role, Permission, RolePermission, UserRole, Log]
}

query listClientCredits {
  fn: import { listClientCredits } from "@src/sales/operations",
  entities: [User, Client, ClientCredit, CreditPayment, Payment, UserSalon, Role, Permission, RolePermission, UserRole]
}

action createSale {
  fn: import { createSale } from "@src/sales/operations",
  entities: [User, Sale, Client, Voucher, Service, ServiceVariant, Product, Package, SaleService, SaleProduct, SalePackage, UserSalon, Role, Permission, RolePermission, UserRole, Log]
}

action updateSale {
  fn: import { updateSale } from "@src/sales/operations",
  entities: [User, Sale, SaleService, SaleProduct, SalePackage, UserSalon, Role, Permission, RolePermission, UserRole, Log]
}

action closeSale {
  fn: import { closeSale } from "@src/sales/operations",
  entities: [User, Sale, SaleService, SaleProduct, SalePackage, Service, ServiceVariant, Product, CommissionConfig, Payment, PaymentMethod, ClientCredit, CreditPayment, StockRecord, UserSalon, Role, Permission, RolePermission, UserRole, Log]
}

action cancelSale {
  fn: import { cancelSale } from "@src/sales/operations",
  entities: [User, Sale, SaleProduct, Product, StockRecord, UserSalon, Role, Permission, RolePermission, UserRole, Log]
}

action addClientCredit {
  fn: import { addClientCredit } from "@src/sales/operations",
  entities: [User, Client, ClientCredit, PaymentMethod, UserSalon, Role, Permission, RolePermission, UserRole, Log]
}
//#endregion

//#region Glamo - Inventory Module
query listProducts {
  fn: import { listProducts } from "@src/inventory/operations",
  entities: [User, Product, ProductCategory, ProductBrand, Supplier, UserSalon, Role, Permission, RolePermission, UserRole, Log]
}

query getProduct {
  fn: import { getProduct } from "@src/inventory/operations",
  entities: [User, Product, Salon, ProductCategory, ProductBrand, Supplier, StockRecord, UserSalon, Role, Permission, RolePermission, UserRole, Log]
}

query getLowStockProducts {
  fn: import { getLowStockProducts } from "@src/inventory/operations",
  entities: [User, Product, ProductCategory, ProductBrand, UserSalon, Role, Permission, RolePermission, UserRole]
}

query listProductCategories {
  fn: import { listProductCategories } from "@src/inventory/operations",
  entities: [User, ProductCategory, Product, UserSalon, Role, Permission, RolePermission, UserRole]
}

query listProductBrands {
  fn: import { listProductBrands } from "@src/inventory/operations",
  entities: [User, ProductBrand, Product, UserSalon, Role, Permission, RolePermission, UserRole]
}

query listSuppliers {
  fn: import { listSuppliers } from "@src/inventory/operations",
  entities: [User, Supplier, Product, UserSalon, Role, Permission, RolePermission, UserRole]
}

action createProduct {
  fn: import { createProduct } from "@src/inventory/operations",
  entities: [User, Product, ProductCategory, ProductBrand, Supplier, StockRecord, Notification, UserSalon, Role, Permission, RolePermission, UserRole, Log]
}

action updateProduct {
  fn: import { updateProduct } from "@src/inventory/operations",
  entities: [User, Product, ProductCategory, ProductBrand, Supplier, UserSalon, Role, Permission, RolePermission, UserRole, Log]
}

action deleteProduct {
  fn: import { deleteProduct } from "@src/inventory/operations",
  entities: [User, Product, SaleProduct, UserSalon, Role, Permission, RolePermission, UserRole, Log]
}

action recordStockMovement {
  fn: import { recordStockMovement } from "@src/inventory/operations",
  entities: [User, Product, StockRecord, Notification, UserSalon, Role, Permission, RolePermission, UserRole, Log]
}

action createProductCategory {
  fn: import { createProductCategory } from "@src/inventory/operations",
  entities: [User, ProductCategory, UserSalon, Role, Permission, RolePermission, UserRole, Log]
}

action updateProductCategory {
  fn: import { updateProductCategory } from "@src/inventory/operations",
  entities: [User, ProductCategory, UserSalon, Role, Permission, RolePermission, UserRole, Log]
}

action deleteProductCategory {
  fn: import { deleteProductCategory } from "@src/inventory/operations",
  entities: [User, ProductCategory, Product, UserSalon, Role, Permission, RolePermission, UserRole, Log]
}

action createProductBrand {
  fn: import { createProductBrand } from "@src/inventory/operations",
  entities: [User, ProductBrand, UserSalon, Role, Permission, RolePermission, UserRole, Log]
}

action updateProductBrand {
  fn: import { updateProductBrand } from "@src/inventory/operations",
  entities: [User, ProductBrand, UserSalon, Role, Permission, RolePermission, UserRole, Log]
}

action deleteProductBrand {
  fn: import { deleteProductBrand } from "@src/inventory/operations",
  entities: [User, ProductBrand, Product, UserSalon, Role, Permission, RolePermission, UserRole, Log]
}

action createSupplier {
  fn: import { createSupplier } from "@src/inventory/operations",
  entities: [User, Supplier, UserSalon, Role, Permission, RolePermission, UserRole, Log]
}

action updateSupplier {
  fn: import { updateSupplier } from "@src/inventory/operations",
  entities: [User, Supplier, UserSalon, Role, Permission, RolePermission, UserRole, Log]
}

action deleteSupplier {
  fn: import { deleteSupplier } from "@src/inventory/operations",
  entities: [User, Supplier, Product, UserSalon, Role, Permission, RolePermission, UserRole, Log]
}
//#endregion

//#region Glamo - Cash Register Module
query listCashSessions {
  fn: import { listCashSessions } from "@src/cashRegister/operations",
  entities: [User, CashRegisterSession, CashMovement, UserSalon, Role, Permission, RolePermission, UserRole, Log]
}

query getCashSession {
  fn: import { getCashSession } from "@src/cashRegister/operations",
  entities: [User, Salon, CashRegisterSession, CashMovement, Payment, PaymentMethod, Sale, UserSalon, Role, Permission, RolePermission, UserRole, Log]
}

query getDailyCashReport {
  fn: import { getDailyCashReport } from "@src/cashRegister/operations",
  entities: [User, CashRegisterSession, CashMovement, Payment, PaymentMethod, Sale, UserSalon, Role, Permission, RolePermission, UserRole, Log]
}

action openCashSession {
  fn: import { openCashSession } from "@src/cashRegister/operations",
  entities: [User, CashRegisterSession, UserSalon, Role, Permission, RolePermission, UserRole, Log]
}

action closeCashSession {
  fn: import { closeCashSession } from "@src/cashRegister/operations",
  entities: [User, CashRegisterSession, CashMovement, Payment, PaymentMethod, Sale, UserSalon, Role, Permission, RolePermission, UserRole, Log]
}

action addCashMovement {
  fn: import { addCashMovement } from "@src/cashRegister/operations",
  entities: [User, CashRegisterSession, CashMovement, UserSalon, Role, Permission, RolePermission, UserRole, Log]
}
//#endregion

//#region Glamo - Reports Module
query getSalesReport {
  fn: import { getSalesReport } from "@src/reports/operations",
  entities: [User, Sale, SaleService, SaleProduct, SalePackage, Service, Product, Package, UserSalon, Role, Permission, RolePermission, UserRole, Log]
}

query getCommissionsReport {
  fn: import { getCommissionsReport } from "@src/reports/operations",
  entities: [User, UserSalon, Role, Permission, RolePermission, UserRole, Log]
}

query getInventoryReport {
  fn: import { getInventoryReport } from "@src/reports/operations",
  entities: [User, Product, ProductCategory, ProductBrand, StockRecord, UserSalon, Role, Permission, RolePermission, UserRole, Log]
}

query getAppointmentReport {
  fn: import { getAppointmentReport } from "@src/reports/operations",
  entities: [User, Appointment, Client, Service, AppointmentService, UserSalon, Role, Permission, RolePermission, UserRole, Log]
}

query getFinancialReport {
  fn: import { getFinancialReport } from "@src/reports/operations",
  entities: [User, Payment, PaymentMethod, Sale, UserSalon, Role, Permission, RolePermission, UserRole, Log]
}
//#endregion

//#region Glamo Frontend - Dashboard and Core Pages
route DashboardRoute { path: "/dashboard", to: DashboardPage }
page DashboardPage {
  authRequired: true,
  component: import DashboardPage from "@src/client/modules/dashboard/DashboardPage"
}

route ClientsListRoute { path: "/clients", to: ClientsListPage }
page ClientsListPage {
  authRequired: true,
  component: import ClientsListPage from "@src/client/modules/clients/ClientsListPage"
}

route NotificationsRoute { path: "/notifications", to: NotificationsPage }
page NotificationsPage {
  authRequired: true,
  component: import NotificationsPage from "@src/client/modules/notifications/NotificationsPage"
}

route ServicesListRoute { path: "/services", to: ServicesListPage }
page ServicesListPage {
  authRequired: true,
  component: import ServicesListPage from "@src/client/modules/services/ServicesListPage"
}

route AppointmentsListRoute { path: "/appointments", to: AppointmentsListPage }
page AppointmentsListPage {
  authRequired: true,
  component: import AppointmentsListPage from "@src/client/modules/appointments/AppointmentsListPage"
}

route SalesListRoute { path: "/sales", to: SalesListPage }
page SalesListPage {
  authRequired: true,
  component: import SalesListPage from "@src/client/modules/sales/SalesListPage"
}

route InventoryListRoute { path: "/inventory", to: InventoryListPage }
page InventoryListPage {
  authRequired: true,
  component: import InventoryListPage from "@src/client/modules/inventory/InventoryListPage"
}

route CashRegisterRoute { path: "/cash-register", to: CashRegisterPage }
page CashRegisterPage {
  authRequired: true,
  component: import CashRegisterPage from "@src/client/modules/cashRegister/CashRegisterPage"
}

route ReportsRoute { path: "/reports", to: ReportsPage }
page ReportsPage {
  authRequired: true,
  component: import ReportsPage from "@src/client/modules/reports/ReportsPage"
}
//#endregion
